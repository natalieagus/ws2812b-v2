module ram_mode #(
    COLUMN_DIMENSION = 16d16 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 16d16 : ROW_DIMENSION > 0,
    PIXEL_COUNT = 16d256 : PIXEL_COUNT > 0,
    BUFFER_SIZE = 1024 : BUFFER_SIZE > 0 // ensure this value is larger than PIXEL_COUNT * $clog2(COLOR_ENCODING)
) (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8],      // DIP switches on IO Shield
    output data
) {
    
    const CLK_FREQ = $is_sim() ? 1000 : 100000000
    // how many different encodings are used? As example, we use 4 colors, hence ENCODING_AMOUNT is 4
    const ENCODING_AMOUNT = 4 
    
    // OFF WHITE (11), DIM BLUE (10), DIM RED (01), OFF(00)
    const LEDCOLOR = {24h0F0F0F, 24h030000, 24h000300, 24h000000} 
    enum States {IDLE, UPDATE_RAM, REFRESH}
    
    index_reverser index_reverser(#COLUMN_DIMENSION(COLUMN_DIMENSION), #SIZE($clog2(PIXEL_COUNT)))
    
    
    .clk(clk){
        .rst(rst){
            // the data_ram, this is a custom data_ram for demonstration purposes
            // along with custom "player location"
            data_ram ram(#ROW_DIMENSION(ROW_DIMENSION), #ENCODING_AMOUNT(ENCODING_AMOUNT), #COLUMN_DIMENSION(COLUMN_DIMENSION))
            // 0,0 is assumed to be at the top right of LED matrix: Check this with your matrix orientation
            // right ---> x--
            // left ---> x++ 
            // down ---> y++ 
            // up ---> y--
            dff player_x_pos[$clog2(COLUMN_DIMENSION)](#INIT(0))
            dff player_y_pos[$clog2(ROW_DIMENSION)](#INIT(0))
            dff update_ram_flag(#INIT(0))
            dff fsm[$width(States)](#INIT(States.IDLE))
            ws2812b_driver driver(#PIXEL_COUNT(PIXEL_COUNT)) 
            dff on_off_toggle
        }
    }

    // user inputs 
    button_conditioner movement_button[5](.clk(5x{{clk}}), #CLK_FREQ(5x{{CLK_FREQ}}))
    edge_detector movement_button_edge[5](.clk(5x{{clk}}), #RISE(5x{{1}}), #FALL(5x{{0}}))
    
    
    always {
        led = 8h00            
        io_led = 3x{{8h00}}
        io_segment = 8hff
        io_select = 4hf
        data = 0
        
        player_x_pos.d = player_x_pos.q
        player_y_pos.d = player_y_pos.q
        update_ram_flag.d = update_ram_flag.q
        on_off_toggle.d = on_off_toggle.q
        fsm.d = fsm.q
        
        ram.address = 0        // address 0 selected by default
        
        movement_button.in = c{io_button[1], io_button[4], io_button[3], io_button[2], io_button[0]} // 0: up, 2: down, 3: left, 4: right
        movement_button_edge.in = movement_button.out
        driver.update = 0 // do not refresh by default
        driver.clear = 0 // do not clear by default
        
        // the sample matrix we use has top RIGHT as 0,0
        // check player movement update 
        // we assume a player is a 2x2 square, the coordinate stored in player_x_pos and player_y_pos indicate top right dot 
        if (movement_button_edge.out[0]){
            // clamp at 0
            if (|player_y_pos.q){
                player_y_pos.d = player_y_pos.q - 1 // up (because up decreases y coordinate in the RAM)
            }
        }
        
        if (movement_button_edge.out[1]){
            // clamp 
            if (player_y_pos.q < COLUMN_DIMENSION-2){
                player_y_pos.d = player_y_pos.q + 1 // down (because down increases y coordinate in the RAM
            }
        }
        
        if (movement_button_edge.out[2]){ // io_button[3]
            // clamp 
            if (player_x_pos.q < COLUMN_DIMENSION-2){
                player_x_pos.d = player_x_pos.q + 1 // left (check the orientation of your own matrix)
            }
        }
        if (movement_button_edge.out[3]){ // io_button[4]
            // clamp at 0 
            if (|player_x_pos.q){
                player_x_pos.d = player_x_pos.q - 1 // right (check the orientation of your own matrix)
            }
        }
         
        if (movement_button_edge.out[4]){
            if (on_off_toggle.q){
                 driver.clear = 1
            }
            on_off_toggle.d = ~on_off_toggle.q
        }
        
        // update the ram whenever player moves or io_button[0] is pressed
        if (|movement_button_edge.out[3:0]){
            update_ram_flag.d = 1
        }
        
        // connect player location to RAM, set update as 0 initially
        ram.player_x_pos = player_x_pos.q 
        ram.player_y_pos = player_y_pos.q
        ram.update = 0 
        

        
        // connect reverser to led_strip 
        index_reverser.input_address = driver.pixel_address
        
        ram.address = 0 
        
        case (fsm.q){
            States.UPDATE_RAM:
                // when ram is ready, and led is idling at RESET state, we load the strip
                if (ram.ready & driver.reset){
                    // clear flag 
                    update_ram_flag.d = 0
                    fsm.d = States.REFRESH
                    ram.address = index_reverser.output_address
                    driver.update = 1
                }
                
                led[1:0] = b10
            
            States.REFRESH:
                // if at the last FPGA clock cycle for this bit, advance the address first because our RAM needs 1 additional clock cycle to work
                if (driver.next_pixel){
                    index_reverser.input_address = driver.pixel_address + 1
                }
                
                // pass this to ram 
                ram.address = index_reverser.output_address
                
                // wait until we are all done in updating our LED;
                if (driver.done){
                    fsm.d = States.IDLE
                }
                led[1:0] = b11
            
            States.IDLE:
                if (update_ram_flag.q){ // if there's movement update or start button pressed
                    fsm.d = States.UPDATE_RAM
                    ram.update = 1  // send update signal to ram first, dont clear the update flag yet 
                }
                led[1:0] = b01
                index_reverser.input_address = ram.debug_address_pointer
            
        }
        
        driver.color = LEDCOLOR[ram.out_encoding] 
        data = driver.data
        
        // debug 
        io_led[0] = player_x_pos.q // player position 
        io_led[1] = player_y_pos.q
        io_led[2] = driver.pixel_address
        
        led[7:5] = ram.debug_data
    }
}